//C programing
//prime number
#include <stdio.h>
int main() {
  int n, i, rem = 0;
  printf("Enter a positive integer: ");
  scanf("%d", &n);

  for (i = 2; i <= n / 2; ++i) {
    if (n % i == 0) {
      rem = 1;
      break;
    }
  }

  if (n == 1) {
    printf("1 is neither prime nor composite.");
  } 
  else {
    if (rem == 0)
      printf("%d is a prime number.", n);
    else
      printf("%d is not a prime number.", n);
  }

  return 0;
}
//fibonacci series
#include <stdio.h>

int main() {
   int a, b, c, i, n;

   n = 4;

   a = b = 1;
   
   printf("%d %d ",a,b);

   for(i = 1; i <= n-2; i++) {
      c = a + b;
      printf("%d ", c);
      
      a = b;
      b = c;
   }
   
   return 0;
}
//factorial

#include <stdio.h>
 
int main()
{
  int c, n, fact = 1;
 
  printf("Enter a number to factorial\n");
  scanf("%d", &n);
  for (c = 1; c <= n; c++)
    fact = fact * c;
 
  printf("Factorial  %d = %d\n", n, fact);
 
  return 0;
}
#include <stdio.h>
int main()
{
  int n, rev= 0, rem, ori;
    printf("Enter an integer: ");
    scanf("%d", &n);
    original = n;

    while (n != 0) {
        rem = n % 10;
        rev = rev* 10 + rem;
        n /= 10;
    }

    if (ori == rev)
        printf("%d is a palindrome.", ori);
    else
        printf("%d is not a palindrome.", ori);

    return 0;
}
//Bind method() program
//Q-1
let user = {
  firstName: "John"
};

function func() {
  alert(this.firstName);
}

let funcUser = func.bind(user);
funcUser();
//Q-2
function mul(a, b) {
    return a * b;
  }
  
  let triple = mul.bind(null, 4);
  alert( triple(4) ); 
  alert( triple(5) );
  //Q-3
  function myFunction() {
    console.log(this)     
  }
 
var obj = {
  someKey: 1, 
}

const boundFunction = myFunction.bind(obj)
boundFunction(); 
//Implicit binding
//Q-4

function myFunction() {
    console.log(this)     
  }
 
var obj = {
  Key: 1, 
  myFunction: myFunction,
}

obj.myFunction();
//Explicit binding 
//Q-5
function myFunction(param1, param2) {
    console.log(this)     
  }
 
const obj = {
  someKey: 1, 
}

const param1 = 1, param2 = 2;
myFunction.call(obj, param1, param2)      
myFunction.apply(obj, [param1, param2])
//Q-6
// program to check if  is palindrome or not
var isPalindrome = function(x) 
{
    const isNegative = x< 0 ? true : false;
      
    if (isNegative){
        return false;
    }
      
    const temp = x;
    let reversed = 0;
      
    while(x>0){
        reversed = (reversed * 10) + (x%10);
        x = parseInt(x/10);
    }
      
    return reversed == temp;
  };
  console.log(isPalindrome );

//prime number
function isPrime(n) {

    if (n < 2)
        return `${n} is not a prime`


    for (let i = 2; i < n; i++) {
        if (n % i === 0) {
            return `${n} is not a prime number`
        }
    }
    return `${n} is a prime number`
}
console.log(isPrime(29));
//fibonacci series
function Fibonacci(num){
	var before = 0;
	var actual = 1;
	var next = 1;

	for(let i = 0; i < num; i++){
		console.log(next)
		before = actual + next;
		actual = next
		next = before
	}
}

Fibonacci(100);
